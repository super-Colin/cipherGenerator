{"version":3,"sources":["logo.svg","components/CesaerCipherForm/CesaerCipherForm.js","App.js","index.js"],"names":["CaesarCipherForm","useState","textToEncode","textToDecode","shiftOptions_encodeOrDecode","shiftOptions_leftOrRight","shiftOptions_alphabet","shiftOptions_shiftAmount","caesarCipherState","setCaesarCipherState","caesarCipherEncode","shiftOptions","charCodeCutOff","encodedText","slicePoint","alphabet","split","forEach","character","lowercase","toLowerCase","charCode","charCodeAt","newCharCode","shiftedCharCode","shiftAmount","leftOrRight","encodeOrDecode","console","log","newChar","String","fromCharCode","toUpperCase","getShiftOptionsJson","className","onFocus","onChange","e","target","value","maxLength","type","min","max","name","checked","decodedText","App","CesaerCipherForm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87bbdfbd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\n\r\n\r\n\r\n// const alphabet = (slicePoint)=>{\r\n//   //https://ourcodeworld.com/articles/read/1458/how-to-print-the-alphabet-with-javascript\r\n\r\n//   // const lowerAndUpperCaseAlphabetWithSymbols = String.fromCharCode(...Array(123).keys()).slice(32);\r\n//   // let lowerCaseAlphabet = String.fromCharCode(...Array(123).keys()).slice(97);\r\n//   return String.fromCharCode(...Array(123).keys()).slice(slicePoint);\r\n// }\r\n\r\n// let shiftOptions = {\r\n//   leftOrRight: -1,\r\n//   alphabet: \"lowercase\",\r\n//   shiftAmount: 3\r\n// }\r\n\r\n\r\n// caesarCipherEncode('some text', shiftOptions);\r\n\r\n\r\n\r\nconst CaesarCipherForm = () => {\r\n\r\n  const [caesarCipherState, setCaesarCipherState] = useState({\r\n    // textToEncode: \"Something that's been through cipher\",\r\n    textToEncode: '',\r\n    textToDecode: '',\r\n    shiftOptions_encodeOrDecode: 1, // -1 = decode, 1 = encode\r\n    shiftOptions_leftOrRight: 1, //-1 =left, 1 = right\r\n    shiftOptions_alphabet: \"lowercase\",\r\n    shiftOptions_shiftAmount: 3,\r\n\r\n  });\r\n\r\n  const caesarCipherEncode = (textToEncode, shiftOptions) => {\r\n    // console.log(shiftOptions);\r\n    const charCodeCutOff = 123; // end of alphabet and symbols in charCode\r\n    // const slicePoint = 97; //begining of lowercase alphabet\r\n    let encodedText = '';\r\n\r\n    let slicePoint = '';\r\n    switch(shiftOptions.alphabet){\r\n      case \"lowerAndUpperCaseAlphabetWithSymbols\":\r\n        slicePoint = 32;\r\n      case \"lowercase\":\r\n      default:\r\n        slicePoint = 97;\r\n    }\r\n    \r\n    // const alphabet = alphabet(slicePoint).split('');\r\n    // const alphabet = String.fromCharCode(...Array(charCodeCutOff).keys()).slice(slicePoint).split('');\r\n    let textToEncodeArray = textToEncode.split('');\r\n\r\n\r\n    textToEncodeArray.forEach( (character) => {\r\n      let lowercase = '';\r\n      if ( character === character.toLowerCase() ){ lowercase = true } else { lowercase = false }\r\n\r\n      let charCode = character.toLowerCase().charCodeAt(0);\r\n      let newCharCode = 0;\r\n      if(charCode >= charCodeCutOff || charCode < slicePoint){\r\n        newCharCode = charCode;\r\n      }else{\r\n        let amountToShift = (shiftOptions.shiftAmount * shiftOptions.leftOrRight * shiftOptions.encodeOrDecode );\r\n        // console.log(amountToShift);\r\n        let shiftedCharCode = amountToShift + charCode;\r\n        // console.log( (shiftOptions.shiftAmount * shiftOptions.leftOrRight * shiftOptions.encodeOrDecode ) )\r\n        \r\n        if( shiftedCharCode <= slicePoint ){\r\n          newCharCode = (charCodeCutOff - 1) + (shiftedCharCode - slicePoint);\r\n          console.log(`shiftedCharCode < slicePoint: ${shiftedCharCode} < ${charCode} new char code: ${newCharCode}`);\r\n        } else if(shiftedCharCode >= charCodeCutOff){\r\n          newCharCode = slicePoint + (shiftedCharCode - charCodeCutOff);\r\n          console.log(`shiftedCharCode > charCodeCutOff: ${slicePoint} + ${(shiftedCharCode - charCodeCutOff)} = ${newCharCode}`);\r\n        }else{\r\n          newCharCode = shiftedCharCode;\r\n        }\r\n      }\r\n      let newChar = String.fromCharCode(newCharCode)\r\n      if( ! lowercase ){newChar = newChar.toUpperCase();}\r\n      encodedText += newChar;\r\n      \r\n    });\r\n\r\n    return encodedText;\r\n\r\n  }\r\n\r\n  const getShiftOptionsJson = ()=>{\r\n    let shiftOptions = {\r\n      encodeOrDecode: caesarCipherState.shiftOptions_encodeOrDecode,\r\n      leftOrRight: caesarCipherState.shiftOptions_leftOrRight,\r\n      alphabet: caesarCipherState.shiftOptions_alphabet,\r\n      shiftAmount: caesarCipherState.shiftOptions_shiftAmount,\r\n    }\r\n    console.log('shiftOptions: ', shiftOptions);\r\n    return shiftOptions;\r\n  }\r\n\r\n  const encodeTextAreaHandler = (e)=>{\r\n    const shiftOptions = getShiftOptionsJson();\r\n    const encodedText = caesarCipherEncode(e.target.value, shiftOptions);\r\n    setCaesarCipherState({\r\n      ...caesarCipherState,\r\n      textToEncode: e.target.value,\r\n      textToDecode: encodedText\r\n    });\r\n  }\r\n  const decodeTextAreaHandler = (e)=>{\r\n    const shiftOptions = getShiftOptionsJson();\r\n    const decodedText = caesarCipherEncode(e.target.value, shiftOptions);\r\n    setCaesarCipherState({\r\n      ...caesarCipherState,\r\n      textToEncode: decodedText,\r\n      textToDecode: e.target.value\r\n    });\r\n  }\r\n\r\n  // abcdefghijklmnopqrstuvwxyz\r\n  return (\r\n    <div className=\"caesarCipher_container\">\r\n\r\n\r\n      <div className=\"encode\">\r\n        <h1 className=\"caesarCipher_title\" >Encode</h1>\r\n        <textarea\r\n          className=\"caesarCipher_textInput\"\r\n          onFocus={()=>{setCaesarCipherState({...caesarCipherState, shiftOptions_encodeOrDecode:1})}}\r\n          onChange={encodeTextAreaHandler}\r\n          value={caesarCipherState.textToEncode} \r\n          maxLength=\"100\" \r\n        />\r\n      </div>\r\n\r\n      <div className=\"options\">\r\n        <hr />\r\n        <h2 className=\"caesarCipher_title\" >Options</h2>\r\n\r\n        <div className=\"caesarCipher_options-adjustments\">\r\n          <div>\r\n            <h3>Shift Amount</h3>\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"9\" \r\n              value={caesarCipherState.shiftOptions_shiftAmount}\r\n              onChange={ (e)=>{setCaesarCipherState({...caesarCipherState, shiftOptions_shiftAmount: e.target.value})} }\r\n            />\r\n            <br />\r\n            <span>{caesarCipherState.shiftOptions_shiftAmount}</span>\r\n          </div>\r\n\r\n        \r\n          <div >\r\n            <h3>Left or Right</h3>\r\n            <div>\r\n              <input \r\n              type=\"checkbox\" \r\n              value=\"left\" \r\n              name=\"left\" \r\n              checked={ caesarCipherState.shiftOptions_leftOrRight - 1}\r\n              onChange={ ()=>{setCaesarCipherState({...caesarCipherState, shiftOptions_leftOrRight: -1})} }\r\n            />\r\n              <span>Left</span>\r\n            </div>\r\n            <div>\r\n              <input \r\n              type=\"checkbox\" \r\n              value=\"right\" \r\n              name=\"right\" \r\n              checked={ caesarCipherState.shiftOptions_leftOrRight + 1}\r\n              onChange={ ()=>{setCaesarCipherState({...caesarCipherState, shiftOptions_leftOrRight: 1})} }\r\n            />\r\n              <span>Right</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <p>Shift Amount: {caesarCipherState.shiftOptions_shiftAmount}</p>\r\n          <p> Left or Right: {caesarCipherState.shiftOptions_leftOrRight + 1 ? \"Right\" : \"Left\"}</p>\r\n          <p> Decode or Encode: {caesarCipherState.shiftOptions_encodeOrDecode + 1 ? \"Encode\" : \"Decode\"}</p>\r\n        </div>\r\n        \r\n        \r\n        <hr />\r\n      </div>\r\n\r\n\r\n      <div className=\"decode\">\r\n        <h1 className=\"caesarCipher_title\" >Decode</h1>\r\n        <textarea\r\n          className=\"caesarCipher_textInput\"\r\n          \r\n          onFocus={()=>{setCaesarCipherState({...caesarCipherState, shiftOptions_encodeOrDecode:-1})}}\r\n          onChange={decodeTextAreaHandler}\r\n          value={caesarCipherState.textToDecode}\r\n          maxLength=\"100\"\r\n        />\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CaesarCipherForm\r\n","import logo from './logo.svg';\nimport './App.css';\n\nimport CesaerCipherForm from './components/CesaerCipherForm/CesaerCipherForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CesaerCipherForm />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}